import http from 'http';
import url from 'url';
import { 
  API_GATEWAY_PORT, 
  TEMPLATE_SERVICE_HOST, 
  TEMPLATE_SERVICE_PORT,
  WORKER_SERVICE_HOST,
  WORKER_SERVICE_PORT,
  PAYROLL_SERVICE_HOST,
  PAYROLL_SERVICE_PORT,
  AUTH_SERVICE_HOST,      
  AUTH_SERVICE_PORT 
} from './config/env';
import { handleWorkerRoutes } from './routes/worker.routes';
import { handleDocumentRoutes } from './routes/document.routes';
import { handleLogRoutes } from './routes/timeSheet.routes';
import { handleTemplateRoutes } from './routes/template.routes';
import { handlePayrollRoutes } from './routes/payroll.routes';
import { handleAuthRoutes } from './routes/auth.routes'; 
import { sendError } from './middlewares/errorHandler';
import { checkTemplateService } from './services/templateServiceChecker';
import { checkWorkerService } from './services/workerServiceChecker';
import { checkPayrollService } from './services/payrollServiceChecker';
import { checkAuthService } from './services/authServiceChecker';

// API Gateway para rotear requisi√ß√µes para os servi√ßos apropriados
export class SimpleApiGateway {
  private server: http.Server;

  // Construtor do API Gateway
  constructor() {
    this.server = http.createServer(this.handleRequest.bind(this));
  }

  // M√©todo para iniciar o servidor
  public start(): void {
    this.server.listen(API_GATEWAY_PORT, () => {
      console.log(`üö™ API Gateway rodando na porta ${API_GATEWAY_PORT}`);
    });
  }

  // M√©todo para lidar com as requisi√ß√µes
  private async handleRequest(req: http.IncomingMessage, res: http.ServerResponse): Promise<void> {
    // Configura√ß√£o de CORS para permitir requisi√ß√µes cross-origin
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.setHeader('Access-Control-Max-Age', '86400');

    // Verifica se a requisi√ß√£o √© uma pr√©-verifica√ß√£o CORS
    if (req.method === 'OPTIONS') {
      res.writeHead(204);
      res.end();
      return;
    }

    // Processa a requisi√ß√£o
    try {
      const parsedUrl = url.parse(req.url || '/', true);
      const path = parsedUrl.pathname || '/';
      console.log(`üîÑ Gateway recebeu requisi√ß√£o: ${req.method} ${path}`);

       // Tenta processar as rotas de autentica√ß√£o (PRIORIDADE M√ÅXIMA)
      if (await handleAuthRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }
      
      // Tenta processar as rotas de documentos 
      if (await handleDocumentRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }
      
      // Tenta processar as rotas de Time Sheet (registro de ponto)
      if (await handleLogRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }
      
      // Tenta processar as rotas de workers
      if (await handleWorkerRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }

      // Tenta processar as rotas de templates
      if (await handleTemplateRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }
      
      // Tenta processar as rotas de folha de pagamento
      if (await handlePayrollRoutes(req, res, path, new URL(req.url || '/', `http://${req.headers.host}`))) {
        return;
      }

      // Caso nenhuma rota seja encontrada
      console.warn(`‚ùå Rota n√£o encontrada: ${path}`);
      sendError(res, 404, 'Rota n√£o encontrada');
    } catch (error) {
      console.error('‚ùå Erro no API Gateway:', error);
      sendError(res, 500, 'Erro interno no API Gateway');
    }
  }
}

// Inicia o API Gateway
const apiGateway = new SimpleApiGateway();

// Verifica se os servi√ßos est√£o dispon√≠veis
async function startGateway() {
  console.log('üöÄ Iniciando API Gateway...');  

   // Verifica se o servi√ßo de autentica√ß√£o est√° dispon√≠vel
  const authServiceAvailable = await checkAuthService(
    AUTH_SERVICE_HOST,
    Number(AUTH_SERVICE_PORT)
  );

  // Verifica se o servi√ßo de templates est√° dispon√≠vel
  const templateServiceAvailable = await checkTemplateService(
    TEMPLATE_SERVICE_HOST, 
    Number(TEMPLATE_SERVICE_PORT)
  );
  
  // Verifica se o servi√ßo de workers est√° dispon√≠vel
  const workerServiceAvailable = await checkWorkerService(
    WORKER_SERVICE_HOST,
    Number(WORKER_SERVICE_PORT)
  );
  
  // Verifica se o servi√ßo de folha de pagamento est√° dispon√≠vel
  const payrollServiceAvailable = await checkPayrollService(
    PAYROLL_SERVICE_HOST,
    Number(PAYROLL_SERVICE_PORT)
  );
  
  // Exibe o status dos servi√ßos
  console.log(`üìä Status dos servi√ßos:`);
  console.log(`Servi√ßo de Autentica√ß√£o: ${authServiceAvailable ? '‚úÖ Online' : '‚ùå Offline'}`);   
  console.log(`Servi√ßo de Workers (inclui Documentos e TimeSheet): ${workerServiceAvailable ? '‚úÖ Online' : '‚ùå Offline'}`);
  console.log(`Servi√ßo de Templates: ${templateServiceAvailable ? '‚úÖ Online' : '‚ùå Offline'}`);
  console.log(`Servi√ßo de Folha de Pagamento: ${payrollServiceAvailable ? '‚úÖ Online' : '‚ùå Offline'}`);
  
  // Inicia o gateway mesmo que alguns servi√ßos estejam offline
  apiGateway.start();
}

// Inicia o gateway
if (require.main === module) {
  startGateway();
}

export default apiGateway;